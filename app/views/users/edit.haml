= render 'shared/googleapi'

- content_for :sidebar do
  = render 'shared/sidebar'

- if false # @user.dancer?
  .panel.panel-default
    .panel-body.text-center
      %h5= t('.siloette_is_all_about')
      .row
        .col-sm-6
          %h5= t('.step1.title')
          %p= t('.step1.description').html_safe
        .col-sm-6
          %h5= t('.step2.title')
          %p= t('.step2.description').html_safe

.panel.panel-default
  .panel-heading
    = t('.basic_information')
  .panel-body
    = simple_form_for @user, html: { class: 'form-horizontal', 'data-parsley-validate' => true } do |f|
      .row
        .col-sm-3.text-center
          .avatar-field-container
            = image_tag avatar_url(@user), alt: '', size: '118x118', title: t('.click_to_change')
            = f.input :avatar, as: :file, label: false
            = f.hidden_field :avatar_cache
        .col-sm-9
          %h2.full-name= @user.name
          %p <b>#{t('.referral_code')}:</b> #{@user.referral_code}
      
      - if @user.dancer?
        /%p.text-muted= fa_icon 'info-circle', text: t('.not_visible_on_profile').html_safe
        / The reject removes transder from the gender list for the time being
        /= f.input :gender, as: :radio_buttons, collection: User.genders.keys.reject{|gender| gender == "transgender"}, label: false, required: true, wrapper: :multi_select
      = render 'users/form/main', f: f
      - if @user.dancer?
        .row
          .col-sm-6
            = render 'users/form/birthday', f: f
          .col-sm-6
            = render 'users/form/instagram', f: f
        .row
          .col-sm-6
            = render 'users/form/location', f: f
          .col-sm-6
          -#  = render 'users/form/social_security_number', f: f
      
        %hr
        = render 'users/form/dancer_profile', f: f
        = f.input :description, as: :text, label: false, required: true, input_html: { rows: 5, 'data-parsley-maxlength' => 250 }
        .row
          = f.input :slug, input_html: { data: { 'parsley-maxlength' => 100, 'parsley-remote' => check_slug_api_users_path, 'parsley-remote-message' => t('activerecord.errors.models.user.attributes.slug.taken') } }, wrapper_html: { class: 'col-sm-12 with-not-editable' }
      .actions.text-center
        = f.button :button, t('common.save'), class: 'btn btn-primary btn-bordered'
